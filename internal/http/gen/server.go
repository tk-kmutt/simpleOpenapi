// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error

	// (POST /pets)
	AddPet(ctx echo.Context) error

	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error

	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", ctx.QueryParams(), &params.Order)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pets", wrapper.FindPets)
	router.POST(baseURL+"/pets", wrapper.AddPet)
	router.DELETE(baseURL+"/pets/:id", wrapper.DeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.FindPetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
