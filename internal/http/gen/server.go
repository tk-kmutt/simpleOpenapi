// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /amazons)
	FindAmazons(ctx echo.Context, params FindAmazonsParams) error

	// (POST /amazons)
	CreateAmazon(ctx echo.Context) error

	// (PATCH /amazons/active/{key})
	ActiveAmazon(ctx echo.Context, key Key) error

	// (PATCH /amazons/inactive/{key})
	InactiveAmazon(ctx echo.Context, key Key) error

	// (DELETE /amazons/{key})
	DeleteAmazon(ctx echo.Context, key Key) error

	// (GET /amazons/{key})
	FindAmazonByKey(ctx echo.Context, key Key) error

	// (PATCH /amazons/{key})
	PatchAmazon(ctx echo.Context, key Key) error

	// (PUT /amazons/{key})
	UpdateAmazon(ctx echo.Context, key Key) error

	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error

	// (POST /pets)
	AddPet(ctx echo.Context) error

	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id ID) error

	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id ID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindAmazons converts echo context to params.
func (w *ServerInterfaceWrapper) FindAmazons(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindAmazonsParams
	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", ctx.QueryParams(), &params.Order)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindAmazons(ctx, params)
	return err
}

// CreateAmazon converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAmazon(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAmazon(ctx)
	return err
}

// ActiveAmazon converts echo context to params.
func (w *ServerInterfaceWrapper) ActiveAmazon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithLocation("simple", false, "key", runtime.ParamLocationPath, ctx.Param("key"), &key)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ActiveAmazon(ctx, key)
	return err
}

// InactiveAmazon converts echo context to params.
func (w *ServerInterfaceWrapper) InactiveAmazon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithLocation("simple", false, "key", runtime.ParamLocationPath, ctx.Param("key"), &key)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InactiveAmazon(ctx, key)
	return err
}

// DeleteAmazon converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAmazon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithLocation("simple", false, "key", runtime.ParamLocationPath, ctx.Param("key"), &key)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAmazon(ctx, key)
	return err
}

// FindAmazonByKey converts echo context to params.
func (w *ServerInterfaceWrapper) FindAmazonByKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithLocation("simple", false, "key", runtime.ParamLocationPath, ctx.Param("key"), &key)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindAmazonByKey(ctx, key)
	return err
}

// PatchAmazon converts echo context to params.
func (w *ServerInterfaceWrapper) PatchAmazon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithLocation("simple", false, "key", runtime.ParamLocationPath, ctx.Param("key"), &key)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchAmazon(ctx, key)
	return err
}

// UpdateAmazon converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAmazon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithLocation("simple", false, "key", runtime.ParamLocationPath, ctx.Param("key"), &key)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateAmazon(ctx, key)
	return err
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", ctx.QueryParams(), &params.Order)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/amazons", wrapper.FindAmazons)
	router.POST(baseURL+"/amazons", wrapper.CreateAmazon)
	router.PATCH(baseURL+"/amazons/active/:key", wrapper.ActiveAmazon)
	router.PATCH(baseURL+"/amazons/inactive/:key", wrapper.InactiveAmazon)
	router.DELETE(baseURL+"/amazons/:key", wrapper.DeleteAmazon)
	router.GET(baseURL+"/amazons/:key", wrapper.FindAmazonByKey)
	router.PATCH(baseURL+"/amazons/:key", wrapper.PatchAmazon)
	router.PUT(baseURL+"/amazons/:key", wrapper.UpdateAmazon)
	router.GET(baseURL+"/pets", wrapper.FindPets)
	router.POST(baseURL+"/pets", wrapper.AddPet)
	router.DELETE(baseURL+"/pets/:id", wrapper.DeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.FindPetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//9+Wy3MOCIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
