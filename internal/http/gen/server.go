// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error

	// (POST /pets)
	AddPet(ctx echo.Context) error

	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id ID) error

	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id ID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", ctx.QueryParams(), &params.Order)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pets", wrapper.FindPets)
	router.POST(baseURL+"/pets", wrapper.AddPet)
	router.DELETE(baseURL+"/pets/:id", wrapper.DeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.FindPetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"QnYYdrno8pvrV9f27vffAAAA//+QYPkObhEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
